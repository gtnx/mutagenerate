#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function

import re
import argparse
from mutagen.id3 import APIC
from mutagen.id3 import ID3

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('paths', nargs='+')
parser.add_argument('--expand-cover', dest='expand_cover', default=False, action='store_true')
parser.add_argument('--set-cover', dest='set_cover')
args = parser.parse_args()

trck_rx = re.compile('(^|[^0-9])[0-9]{2}($|[^0-9])')


def get_apic(id3):
    for key, value in id3.items():
        if key.startswith('APIC'):
            return value


def remove_apic(id3):
    for key, value in id3.items():
        if key.startswith('APIC'):
            id3.pop(key)


def expand_apic(id3s, data):
    for id3 in id3s:
        remove_apic(id3)
        id3.add(APIC(encoding=3, mime='image/jpeg', type=3, desc=u'Cover', data=data))
        id3.save()


if __name__ == '__main__':
    id3s = map(ID3, args.paths)
    if args.expand_cover:
        covers = map(get_apic, id3s)
        uniques = list(set([cover.data for cover in covers if cover]))
        if len(uniques) == 0:
            print('No cover found...')
        elif len(uniques) == 1:
            data = uniques[0]
            print('1 cover found, expanding? [Y/n]')
            if raw_input().lower() in ('', 'y', 'yes'):
                print('Expanding covers...')
                expand_apic(id3s, data)
        else:
            for i, path in enumerate(args.paths):
                print('%.2d %s' % (i, path))
            print('Your choice?')
            i = raw_input()
            if i.isdigit() and int(i) in range(len(id3s)):
                data = covers[int(i)].data
                expand_apic(id3s, data)
            else:
                print('Bad input')
    if args.set_cover:
        data = open(args.set_cover).read()
        expand_apic(id3s, data)
